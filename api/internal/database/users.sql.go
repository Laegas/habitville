// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, password, balance)
VALUES (?, ?, ?)
RETURNING id, email, password, balance
`

type CreateUserParams struct {
	Email    sql.NullString  `json:"email"`
	Password sql.NullString  `json:"password"`
	Balance  sql.NullFloat64 `json:"balance"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Balance)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
	)
	return i, err
}

const selectUser = `-- name: SelectUser :one
SELECT id, email, password, balance FROM users WHERE id=?
`

func (q *Queries) SelectUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Balance,
	)
	return i, err
}

const selectUsers = `-- name: SelectUsers :many
SELECT id, email, password, balance FROM users
`

func (q *Queries) SelectUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, selectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
